{"version":3,"sources":["webpack:///./src/pages/graphql.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","imgName","alt","isMDXComponent"],"mappings":"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","file":"component---src-pages-graphql-mdx-0b805c1c1f49baa25fe9.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/Users/SuGuS/Work/gatsbyworkshop/src/components/Layout.js\";\nimport Image from '../components/Image';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`GraphQL es una arquitectura de diseño de APIs y tiene una sintaxis particular\npara describir cómo consultar data que tiene 3 características principales:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Permite al cliente especificar exactamente qué data necesita (con sintaxis\n`}<em parentName=\"li\">{`parecida`}</em>{` a un objeto JSON)`}</li>\n      <li parentName=\"ul\">{`Facilita traer data de fuentes múltiples`}</li>\n      <li parentName=\"ul\">{`Usa un sistema de tipos para describir la data`}</li>\n    </ul>\n    <p>{`Hasta ahora todo muy de manual, pero sigamos así se entiende un poco más todo 😊`}</p>\n    <h3>{`REST vs GraphQL`}</h3>\n    <p>{`Veamos las diferencias que tienen GraphQL vs una API REST:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`API REST`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`GraphQL`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Múltiples endpoints`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Un solo endpoint`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Puede producirse over/under fetching (pedir data de menos/más)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Se pide sólo la data necesaria`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Puede retrasar tiempos de desarrollo si el endpoint no está preparado`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Es más dinámico en preparación de datos desde el back`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Es explícito el tipo de petición que se realiza`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No es tan claro el tipo de petición`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Más claro para manejo de request params / variables`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Quizás un poco menos claro para manejo de variables`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Debe mantenerse la documentación al día`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Es autodocumentado`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Distintas versiones pueden romper compatibilidad`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Es incremental, disminuye la incompatibilidad entre versiones`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><em parentName=\"p\">{`Tengan en claro que algunas cosas de esta tabla son opiniones personales, si\nalguien cree que las cosas no son como las digo y me puede explicar, soy todo\noídos`}</em>{` 🤗`}</p>\n    <p>{`Veamos una comparación de cómo debería traerse la data desde una API REST contra\nuna GraphQL si estuviésemos haciendo, por ejemplo, una red social:`}</p>\n    <h4>{`REST`}</h4>\n    <h2><Image imgName=\"rest.png\" alt=\"Peticiones a una API REST\" mdxType=\"Image\" /></h2>\n    <h4>{`GraphQL`}</h4>\n    <h2><Image imgName=\"graphql.png\" alt=\"Peticiones a una API GraphQL\" mdxType=\"Image\" /></h2>\n    <p>{`Como vemos, según como está armada esta API REST, para mostrar la data de lo que\nsería el `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Home`}</code>{` de algo similar a la red social del pajarito, tendríamos que\nhacer 3 peticiones para traer los datos que, utilizando GraphQL, podríamos traer\nen una sola petición. Ahí se nota la diferencia en cantidad de endpoints.`}</p>\n    <p>{`Todo esto que digo no es que quiera decir que GraphQL es `}<em parentName=\"p\">{`mejor`}</em>{` o que `}<em parentName=\"p\">{`viene a\nreemplazar a REST`}</em>{`, sino que nació con la idea de mejorar algunas falencias de\nREST, pero REST es mejor en otras cosas y situaciones. (cosa que no vamos a\ncubrir acá porque sino se hace larguísimo jajajaja 😅)`}</p>\n    <p>{`En nuestro caso, nosotros vamos a ver cómo se piden datos para utilizarlos en el\nfrontend, podemos encontrar un ejemplo de una `}<strong parentName=\"p\">{`query`}</strong>{` (consulta) en el archivo\n`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`src/components/layout.js`}</code>{`:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"js\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-js\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`const`}</span>{` data `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`useStaticQuery`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`graphql`}<span parentName=\"code\" {...{\n            \"className\": \"token template-string\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"token template-punctuation string\"\n            }}>{`\\``}</span><span parentName=\"span\" {...{\n              \"className\": \"token string\"\n            }}>{`\n  query SiteTitleQuery {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`}</span><span parentName=\"span\" {...{\n              \"className\": \"token template-punctuation string\"\n            }}>{`\\``}</span></span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span></code></pre></div>\n    <p><strong parentName=\"p\">{`Qué #$%#$ es esto, Agustin?`}</strong>{` 😒 Sí, yo sé que al principio dije que era\n`}<em parentName=\"p\">{`parecida`}</em>{` a JSON la sintaxis y esto tiene cosas que nada que ver. Por suerte,\ncomo Gatsby es re copado ya viene con una herramienta fantástica para ver toda\nla data que tenemos disponible para consultar mediante GraphQL. Si notaron en la\nconsola luego de correr el comando `}<strong parentName=\"p\">{`gatsby develop`}</strong>{`, dice que si van a\n`}<a parentName=\"p\" {...{\n        \"href\": \"http://localhost:8000/___graphql\"\n      }}>{`http://localhost:8000/___graphql`}</a>{` se van a encontrar con `}<strong parentName=\"p\">{`GraphiQL`}</strong>{` donde vamos\na ver listado del lado izquierdo en la sección `}<em parentName=\"p\">{`Explorer`}</em>{` toda la data que\ntenemos disponible para traernos al frontend con GraphQL.`}</p>\n    <Image imgName=\"graphiql.png\" alt=\"Interfaz de graphiql\" mdxType=\"Image\" />\n    <p>{`En la imagen vemos que a la izquierda nos va a aparecer toooooodo lo que tenemos\ndisponible, no va a ser exactamente igual que en la imagen pero podemos ver\ncosas como `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`allFile`}</code>{` para consultar todos los archivos que exponemos con el\nplugin `}<strong parentName=\"p\">{`gatsby-source-filesystem`}</strong>{` que nos vino preinstalado, también `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`file`}</code>{`\npara consultar por cierto archivo usando filtros, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`allImageSharp`}</code>{` para todas las\nfotos, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`imageSharp`}</code>{` para una sola foto, y así... Se entiende la diferencia? 😉`}</p>\n    <p>{`Entonces si vemos nuestra query y el resultado de realizarla en el lado derecho\nde `}<strong parentName=\"p\">{`GraphiQL`}</strong>{`, vemos que nos traemos el título de nuestra página, pero dónde\ndefinimos nosotros eso? 🤔 Esto viene predefinido con Gatsby, y son valores que\nestán en el archivo `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`gatsby-config.js`}</code>{`, donde veremos este objeto:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"javascript\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-javascript\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-javascript\"\n        }}>{`siteMetadata`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n    title`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token template-string\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"token template-punctuation string\"\n            }}>{`\\``}</span><span parentName=\"span\" {...{\n              \"className\": \"token string\"\n            }}>{`Gatsby Default Starter`}</span><span parentName=\"span\" {...{\n              \"className\": \"token template-punctuation string\"\n            }}>{`\\``}</span></span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{`\n    description`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token template-string\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"token template-punctuation string\"\n            }}>{`\\``}</span><span parentName=\"span\" {...{\n              \"className\": \"token string\"\n            }}>{`Kick off your next, great Gatsby project with this default starter. This barebones starter ships with the main Gatsby configuration files you might need.`}</span><span parentName=\"span\" {...{\n              \"className\": \"token template-punctuation string\"\n            }}>{`\\``}</span></span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{`\n    author`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token template-string\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"token template-punctuation string\"\n            }}>{`\\``}</span><span parentName=\"span\" {...{\n              \"className\": \"token string\"\n            }}>{`@gatsbyjs`}</span><span parentName=\"span\" {...{\n              \"className\": \"token template-punctuation string\"\n            }}>{`\\``}</span></span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span></code></pre></div>\n    <p>{`El cual va a tener toda la metadata de nuestro proyecto, así que esos tres\nvalores (title, description y author) van a ser consultables tranquilamente en\ncualquier lugar de nuestro frontend si los requerimos! (prueben en GraphiQL si\nno me creen 😛) Creo que mas que seguir explicando cosas, van a aprender más si\nempiezan a jugar un poco con GraphiQL.`}</p>\n    <p>{`Nuestros proyectos de github todavía no los tenemos disponibles para consultar y\nusar en el frontend, para eso necesitamos generar la query en la configuración\ndel plugin y ya estaría (recuerden que nuestros archivos `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`gatsby-algo.js`}</code>{`\nfuncionan como nuestro backend), vamos al siguiente paso para verlo 😁`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}